#!/usr/bin/env node
'use strict'

const program = require('commander');
const pkg = require('../package');
const busybody = require('../');
const log = require('modlog')('busy');

const PORT = require('..').DEFAULT_PORT;


//bsbd bridge
//bsbd bridge /tmp/test.sock
//bsbd bridge localhost:22453
//bsbd bridge tls://localhost:22453 we need key [cert], [ca]
//bsbd bridge amqp://[user:pass@]localhost:22453

//bsbd publish|tell    [uri] <node> --id [nodeid] --event <event> --message <hola!>
//bsbd broadcast|shout [uri]        --id [nodeid] --event <event> --message <hola!>

program
    .version(pkg.version)
    .option('-b, --bridge [bindaddr]', 'run a bridge')
    .option('-n, --node [bindaddr]', 'run a node')
    .option('-a, --action <action>', 'action tell or shout')
    .option('-m, --message <message>', 'message')
    .parse(process.argv);

if (program.bridge) {
    log.info('initializing bridge');

    var bindaddr = program.bridge;

    let cfg = {};

    /*
     * We just called the command with
     * the `--bridge` flag and no value.
     */
    if (bindaddr === true) {
        bindaddr = `127.0.0.1:${PORT}`;
    }

    if(bindaddr.indexOf(':') > 0) {
        let _tmp = bindaddr.split(':');
        cfg = {
            host: _tmp[0],
            port: _tmp[1]
        };
    }

    if(bindaddr.indexOf('.sock') > 0) {
        cfg = {path: bindaddr};
    }

    var b = busybody.createBridge(cfg, function (err) {
        if (err) {
            log.error(err.message || err);
            return process.exit(1);
        }
        log.info('bridge is now listening on "%s"', bindaddr);
    });

    process.once('SIGINT', function () {
        log.info('received SIGINT signal, closing bridge...');
        b.close();
        process.exit(0);
    });
} else if(program.node){
    let config = {
        path: '/tmp/kiko4.sock'
    };

    let node = busybody.createNode(config, (err)=>{
        if (err) {
            log.error(err.message || err);
            return process.exit(1);
        }
        log.info('node is online as ', config);
    });
    var target = program.node;
    var message = program.message;
    var action = program.action;

    node[action](target, message, (err, message)=>{
        console.log(err, message);
        process.exit(0);
    });
} else {
    program.help();
}
